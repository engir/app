{"version":3,"sources":["App.js","sw.js","index.js"],"names":["App","props","parseQueryString","string","slice","split","map","queryParam","kvp","key","value","reduce","query","queryParams","this","window","location","search","hashParams","hash","require","createConnection","host","port","user","database","password","result","console","log","data","activePanel","id","title","Object","keys","description","style","color","React","Component","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","isLocalhost","Boolean","hostname","match","connect","send","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","ReactDOM","render","document","getElementById"],"mappings":"whBAsEeA,G,yDAjEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAGVC,iBAAmB,SAACC,GAChB,OAAOA,EAAOC,MAAM,GAAGC,MAAM,KACxBC,KAAI,SAACC,GACF,IAAIC,EAAMD,EAAWF,MAAM,KAC3B,MAAO,CAACI,IAAKD,EAAI,GAAIE,MAAOF,EAAI,OAEnCG,QAAO,SAACC,EAAOJ,GAEZ,OADAI,EAAMJ,EAAIC,KAAOD,EAAIE,MACdE,IACR,KAbQ,E,qDAkBf,IAAMC,EAAcC,KAAKZ,iBAAiBa,OAAOC,SAASC,QACpDC,EAAaJ,KAAKZ,iBAAiBa,OAAOC,SAASG,MAmBzD,OAjBcC,EAAQ,IAEGC,iBAAiB,CACxCC,KAAM,kBACNC,KAAM,KACNC,KAAM,aACNC,SAAU,aACVC,SAAU,eAIDd,MAAM,kCADR,QAC+C,SAASe,GAC/DC,QAAQC,IAAIF,EAAO,GAAGG,MACXH,EAAO,GAAGG,QAKnB,kBAAC,IAAD,CAAMC,YAAY,QACd,kBAAC,IAAD,CAAOC,GAAG,QACN,kBAAC,IAAD,sBACA,kBAAC,IAAD,CAAOC,MAAM,gBACT,kBAAC,IAAD,KACKC,OAAOC,KAAKtB,GAAaP,KAAI,SAACG,GACfI,EAAYJ,GACxB,OAAO,kBAAC,IAAD,CAAM2B,YAAa3B,GAAnB,UAKnB,kBAAC,IAAD,CAAOwB,MAAM,eACT,kBAAC,IAAD,KACKC,OAAOC,KAAKjB,GAAYZ,KAAI,SAACG,GAC1B,IAAIC,EAAQQ,EAAWT,GACvB,OAAO,kBAAC,IAAD,CAAM2B,YAAa3B,GAAMC,GAAgB,0BAAM2B,MAAO,CAACC,MAAO,QAArB,iB,GAxD9DC,IAAMC,YCMxB,SAASC,EAAgBC,GACxBC,UAAUC,cACRC,SAASH,GACTI,MAAK,SAACC,GACNA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBT,UAAUC,cAAcS,WAK3BzB,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMhByB,OAAM,SAACC,GACP3B,QAAQ2B,MAAM,4CAA6CA,MA6B9D,IAAMC,EAAcC,QAAqC,cAA7B1C,OAAOC,SAAS0C,UAEd,UAA7B3C,OAAOC,SAAS0C,UAEhB3C,OAAOC,SAAS0C,SAASC,MAAM,2DC3DhCC,IAAQC,KAAK,eAAgB,ID6Dd,WACd,GAA6C,kBAAmBlB,UAAW,CAG1E,GADkB,IAAImB,IAAIC,IAAwBhD,OAAOC,UAC3CgD,SAAWjD,OAAOC,SAASgD,OAIxC,OAGDjD,OAAOkD,iBAAiB,QAAQ,WAC/B,IAAMvB,EAAK,UAAMqB,IAAN,sBAEPP,IA7CP,SAAiCd,GAEhCwB,MAAMxB,GACJI,MAAK,SAACqB,GAGe,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAACC,GACnCA,EAAa0B,aAAa3B,MAAK,WAC9B/B,OAAOC,SAAS0D,eAKlBjC,EAAgBC,MAGjBY,OAAM,WACN1B,QAAQC,IAAI,oEA0BX8C,CAAwBjC,GAIxBC,UAAUC,cAAc4B,MAAM1B,MAAK,WAClClB,QAAQC,IACP,gHAMFY,EAAgBC,OCtFpBkC,GAEAC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.1d498f1f.chunk.js","sourcesContent":["import React from 'react';\nimport {Cell, Group, List, Panel, PanelHeader, View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n    parseQueryString = (string) => {\n        return string.slice(1).split('&')\n            .map((queryParam) => {\n                let kvp = queryParam.split('=');\n                return {key: kvp[0], value: kvp[1]}\n            })\n            .reduce((query, kvp) => {\n                query[kvp.key] = kvp.value;\n                return query\n            }, {})\n    };\n\n\n    render() {\n        const queryParams = this.parseQueryString(window.location.search);\n        const hashParams = this.parseQueryString(window.location.hash);\n\n        const mysql = require(\"mysql\");\n\n        const connection = mysql.createConnection({\n          host: \"remotemysql.com\",\n          port: 3306,\n          user: \"Vi7WpVfpJY\",\n          database: \"Vi7WpVfpJY\",\n          password: \"6tQNMUIOBL\"\n\n        });\n        var qp = '3322';\n        connection.query(\"SELECT data FROM app WHERE id=?\", qp, function(result){\n          console.log(result[0].data);\n          var rest = result[0].data;\n        })\n\n\n        return (\n            <View activePanel=\"main\">\n                <Panel id=\"main\">\n                    <PanelHeader>Launch params</PanelHeader>\n                    <Group title=\"Query params\">\n                        <List>\n                            {Object.keys(queryParams).map((key) => {\n                                let value = queryParams[key];\n                                return <Cell description={key}> {}</Cell>;\n                            })}\n                        </List>\n                    </Group>\n\n                    <Group title=\"Hash params\">\n                        <List>\n                            {Object.keys(hashParams).map((key) => {\n                                let value = hashParams[key];\n                                return <Cell description={key}>{value ? value : <span style={{color: 'red'}}>-</span>}</Cell>;\n                            })}\n                        </List>\n                    </Group>\n                </Panel>\n            </View>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","// import 'core-js/es6/map';\n// import 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport App from './App';\nimport registerServiceWorker from './sw';\n\n// Init VK App\nconnect.send('VKWebAppInit', {});\n\n// Service Worker For Cache\nregisterServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}