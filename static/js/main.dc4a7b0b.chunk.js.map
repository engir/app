{"version":3,"sources":["sw.js","index.js","getUser.js"],"names":["registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","isLocalhost","Boolean","window","location","hostname","match","require","post","id","response","alert","body","abs","userdatas","connect","send","URL","process","origin","addEventListener","fetch","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","this","parseQueryString","search","hash"],"mappings":"kPAUA,SAASA,EAAgBC,GACxBC,UAAUC,cACRC,SAASH,GACTI,MAAK,SAACC,GACNA,EAAaC,cAAgB,WAC5B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACD,cAA3BF,EAAiBG,QAChBT,UAAUC,cAAcS,WAK3BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMhBC,OAAM,SAACC,GACPH,QAAQG,MAAM,4CAA6CA,MA6B9D,IAAMC,EAAcC,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCzDbC,EAAQ,KAEhBC,KAAK,6CAA8C,CACtDC,GAAI,MAEPpB,MAAK,SAASqB,GACXC,MAAMD,EAASE,SAGvB,IAAIC,EAAMC,YACVH,MAAME,GAINE,IAAQC,KAAK,eAAgB,ID6Cd,WACd,GAA6C,kBAAmB9B,UAAW,CAG1E,GADkB,IAAI+B,IAAIC,IAAwBf,OAAOC,UAC3Ce,SAAWhB,OAAOC,SAASe,OAIxC,OAGDhB,OAAOiB,iBAAiB,QAAQ,WAC/B,IAAMnC,EAAK,UAAMiC,IAAN,sBAEPjB,IA7CP,SAAiChB,GAEhCoC,MAAMpC,GACJI,MAAK,SAACqB,GAGe,MAApBA,EAASY,SACuD,IAAhEZ,EAASa,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CvC,UAAUC,cAAcuC,MAAMrC,MAAK,SAACC,GACnCA,EAAaqC,aAAatC,MAAK,WAC9Bc,OAAOC,SAASwB,eAKlB5C,EAAgBC,MAGjBc,OAAM,WACNF,QAAQC,IAAI,oEA0BX+B,CAAwB5C,GAIxBC,UAAUC,cAAcuC,MAAMrC,MAAK,WAClCQ,QAAQC,IACP,gHAMFd,EAAgBC,OCtEpB6C,I,iBCfwBC,KAAKC,iBAAiB7B,OAAOC,SAAS6B,QACvCF,KAAKC,iBAAiB7B,OAAOC,SAAS8B,Q","file":"static/js/main.dc4a7b0b.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","// import 'core-js/es6/map';\n// import 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport bridge from '@vkontakte/vk-bridge';\nimport App from './App';\nimport * as userdatas from './getUser';\n\nimport registerServiceWorker from './sw';\n\nconst requestify = require('requestify');\n\nrequestify.post('https://jsonplaceholder.typicode.com/posts', {\n        id: '1'\n    })\n    .then(function(response) {\n        alert(response.body);\n    });\n\nvar abs = userdatas.getInfo();\nalert(abs);\n\n\n// Init VK App\nconnect.send('VKWebAppInit', {});\n\n// Service Worker For Cache\nregisterServiceWorker();\n","var parseQueryString = (string) => {\r\n    return string.slice(1).split('&')\r\n        .map((queryParam) => {\r\n            let kvp = queryParam.split('=');\r\n            return {key: kvp[0], value: kvp[1]}\r\n        })\r\n        .reduce((query, kvp) => {\r\n            query[kvp.key] = kvp.value;\r\n            return query\r\n        }, {})\r\n};\r\n\r\n\r\n    const queryParams = this.parseQueryString(window.location.search);\r\n    const hashParams = this.parseQueryString(window.location.hash);\r\n\r\n    function getInfo() {\r\n      Object.keys(queryParams).map((key) => {\r\n          let value = queryParams[key];\r\n          return [key, value];\r\n        })\r\n    }\r\n"],"sourceRoot":""}