{"version":3,"sources":["sw.js","launchParams.js","index.js"],"names":["Boolean","window","location","hostname","match","getValue","searchOrParsedUrlQuery","keyName","sign","queryParams","processQueryParam","key","value","startsWith","push","formattedSearch","slice","split","Object","keys","length","filter","el","console","log","axios","post","url","search","then","responce","catch","error","err","name","message","connect","send"],"mappings":"+LAgEoBA,QAAqC,cAA7BC,OAAOC,SAASC,UAEd,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2D,oBC5DzB,SAASC,EAASC,EAAwBC,GAC/C,IAAIC,EACEC,EAAc,GAUdC,EAAoB,SAACC,EAAKC,GACT,kBAAVA,IACG,SAARD,EACFH,EAAOI,EACED,EAAIE,WAAW,QACxBJ,EAAYK,KAAK,CAACH,MAAKC,YAK7B,GAAsC,kBAA3BN,EAAqC,CAG9C,IAH8C,EAGxCS,EAAkBT,EAAuBO,WAAW,KACtDP,EAAuBU,MAAM,GAC7BV,EAL0C,cAQ1BS,EAAgBE,MAAM,MARI,IAQ9C,2BAAgD,CAAC,IAAD,UACnBA,MAAM,KADa,mBAE9CP,EAF8C,YARF,oCAa9C,cAAkBQ,OAAOC,KAAKb,GAA9B,eAAuD,CAAlD,IAAMK,EAAG,KAEZD,EAAkBC,EADJL,EAAuBK,IAOzC,SAAKH,GAA+B,IAAvBC,EAAYW,SAGlBX,EAAYY,QAAO,SAAAC,GAAE,OAAIA,EAAGX,MAAQJ,KAAS,GAAGK,MC3CzDW,QAAQC,IAAI,mBACZC,IAAMC,KAAK,gCAAiC,CACxCC,IAAK1B,OAAOC,SAAS0B,SACtBC,MAAK,SAASC,GACf,GAAgB,MAAZA,YAMHC,OAAM,SAAUC,GAEfT,QAAQC,IAAI,4GAAyBQ,MAEzC,IACET,QAAQC,IAAI,wKAAmCnB,EAASJ,OAAOC,SAAS0B,OAAQ,mBAChF,MAAMK,GACNV,QAAQC,IAAI,+FAAgCS,EAAIC,KAAO,IAAMD,EAAIE,SAkBnEC,IAAQC,KAAK,eAAgB,M","file":"static/js/main.30263cba.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nfunction registerValidSW(swUrl) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the old content will have been purged and\n\t\t\t\t\t\t\t// the fresh content will have been added to the cache.\n\t\t\t\t\t\t\t// It's the perfect time to display a \"New content is\n\t\t\t\t\t\t\t// available; please refresh.\" message in your web app.\n\t\t\t\t\t\t\tconsole.log('New content is available; please refresh.');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\tresponse.headers.get('content-type').indexOf('javascript') === -1\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.1/8 is considered localhost for IPv4.\n\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\n\nexport default function register() {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Lets check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://goo.gl/SC7cgQ'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not local host. Just register service worker\n\t\t\t\tregisterValidSW(swUrl);\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","\r\n\r\n/**\r\n * Верифицирует параметры запуска.\r\n * @param searchOrParsedUrlQuery\r\n * @param {string} secretKey\r\n * @returns {boolean}\r\n */\r\nexport function getValue(searchOrParsedUrlQuery, keyName) {\r\n  let sign;\r\n  const queryParams = [];\r\n\r\n  /**\r\n   * Функция, которая обрабатывает входящий query-параметр. В случае передачи\r\n   * параметра, отвечающего за подпись, подменяет \"sign\". В случае встречи\r\n   * корректного в контексте подписи параметра добавляет его в массив\r\n   * известных параметров.\r\n   * @param key\r\n   * @param value\r\n   */\r\n  const processQueryParam = (key, value) => {\r\n    if (typeof value === 'string') {\r\n      if (key === 'sign') {\r\n        sign = value;\r\n      } else if (key.startsWith('vk_')) {\r\n        queryParams.push({key, value});\r\n      }\r\n    }\r\n  };\r\n\r\n  if (typeof searchOrParsedUrlQuery === 'string') {\r\n    // Если строка начинается с вопроса (когда передан window.location.search),\r\n    // его необходимо удалить.\r\n    const formattedSearch = searchOrParsedUrlQuery.startsWith('?')\r\n      ? searchOrParsedUrlQuery.slice(1)\r\n      : searchOrParsedUrlQuery;\r\n\r\n    // Пытаемся спарсить строку как query-параметр.\r\n    for (const param of formattedSearch.split('&')) {\r\n      const [key, value] = param.split('=');\r\n      processQueryParam(key, value);\r\n    }\r\n  } else {\r\n    for (const key of Object.keys(searchOrParsedUrlQuery)) {\r\n      const value = searchOrParsedUrlQuery[key];\r\n      processQueryParam(key, value);\r\n    }\r\n  }\r\n  // Обрабатываем исключительный случай, когда не найдена ни подпись в параметрах,\r\n  // ни один параметр, начинающийся с \"vk_\", дабы избежать\r\n  // излишней нагрузки, образующейся в процессе работы дальнейшего кода.\r\n  if (!sign || queryParams.length === 0) {\r\n    return false;\r\n  }\r\n  return queryParams.filter(el => el.key === keyName)[0].value;\r\n}\r\n","// import 'core-js/es6/map';\n// import 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect';\nimport bridge from '@vkontakte/vk-bridge';\nimport axios from 'axios';\nimport registerServiceWorker from './sw';\nimport { getValue } from './launchParams';\n\nvar correctUser = false;\nconsole.log(\"Send request...\");\naxios.post('https://appsec.vercel.app/api', {\n    url: window.location.search\n}).then(function(responce) {\n  if (responce != null) {\n    var correctUser = true;\n  } else {\n    var correctUser = false;\n  }\n\n}).catch(function (error) {\n    var correctUser = false;\n    console.log('Ошибка авторизации: ' + error);\n});\ntry {\n  console.log(\"Пользователь зарегистрирован: \" + getValue(window.location.search, \"vk_is_app_user\") );\n} catch(err) {\n  console.log(\"Ошибка функции getValue(): \" + err.name + \"/\" + err.message);\n}\nif ( correctUser ) {\n\n  if ( getValue(window.location.search, \"vk_is_app_user\") == 0) {\n\n    alert(\"Регистрируем...\");\n\n  } else {\n\n    alert(\"Авторизация.\");\n  }\n\n}\n\n\n\n// Init VK App\nconnect.send('VKWebAppInit', {});\n\n// Service Worker For Cache\n// registerServiceWorker();\n"],"sourceRoot":""}